{"ast":null,"code":"var _jsxFileName = \"/home/camilo/Documents/RaspberryPi/EstacionMeteorologica/frontend/iot-dashboard/src/Historico.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Historico = ({\n  periodo\n}) => {\n  _s();\n  const [datos, setDatos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await axios.get(`http://localhost:5001/historico/${periodo}`);\n        setDatos(response.data);\n      } catch (error) {\n        console.error(\"Error al obtener datos históricos:\", error);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, [periodo]);\n  const obtenerLabels = () => {\n    return datos.map(dato => {\n      const fecha = new Date(dato.fecha);\n      return `${fecha.getDate()}/${fecha.getMonth() + 1}`;\n    });\n  };\n  const obtenerTemperaturas = () => {\n    return datos.map(dato => dato.temperatura);\n  };\n  const obtenerHumedades = () => {\n    return datos.map(dato => dato.humedad);\n  };\n  const data = {\n    labels: obtenerLabels(),\n    datasets: [{\n      label: \"Temperatura (°C)\",\n      data: obtenerTemperaturas(),\n      borderColor: \"rgba(255, 99, 132, 1)\",\n      borderWidth: 2,\n      fill: false\n    }, {\n      label: \"Humedad (%)\",\n      data: obtenerHumedades(),\n      borderColor: \"rgba(54, 162, 235, 1)\",\n      borderWidth: 2,\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Gr\\xE1ficos Hist\\xF3ricos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500\",\n      children: \"Cargando datos del hist\\xF3rico...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : datos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500\",\n      children: \"No hay datos disponibles.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Historico, \"HpE/h5/9xHu738NRpM31HwD+slk=\");\n_c = Historico;\nexport default Historico;\nvar _c;\n$RefreshReg$(_c, \"Historico\");","map":{"version":3,"names":["React","useState","useEffect","Line","axios","jsxDEV","_jsxDEV","Historico","periodo","_s","datos","setDatos","loading","setLoading","fetchData","response","get","data","error","console","obtenerLabels","map","dato","fecha","Date","getDate","getMonth","obtenerTemperaturas","temperatura","obtenerHumedades","humedad","labels","datasets","label","borderColor","borderWidth","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["/home/camilo/Documents/RaspberryPi/EstacionMeteorologica/frontend/iot-dashboard/src/Historico.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\nconst Historico = ({ periodo }) => {\n  const [datos, setDatos] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await axios.get(`http://localhost:5001/historico/${periodo}`);\n        setDatos(response.data);\n      } catch (error) {\n        console.error(\"Error al obtener datos históricos:\", error);\n      }\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [periodo]);\n\n  const obtenerLabels = () => {\n    return datos.map((dato) => {\n      const fecha = new Date(dato.fecha);\n      return `${fecha.getDate()}/${fecha.getMonth() + 1}`;\n    });\n  };\n\n  const obtenerTemperaturas = () => {\n    return datos.map((dato) => dato.temperatura);\n  };\n\n  const obtenerHumedades = () => {\n    return datos.map((dato) => dato.humedad);\n  };\n\n  const data = {\n    labels: obtenerLabels(),\n    datasets: [\n      {\n        label: \"Temperatura (°C)\",\n        data: obtenerTemperaturas(),\n        borderColor: \"rgba(255, 99, 132, 1)\",\n        borderWidth: 2,\n        fill: false,\n      },\n      {\n        label: \"Humedad (%)\",\n        data: obtenerHumedades(),\n        borderColor: \"rgba(54, 162, 235, 1)\",\n        borderWidth: 2,\n        fill: false,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"mt-6\">\n      <h2 className=\"text-xl font-semibold mb-4\">Gráficos Históricos</h2>\n      {loading ? (\n        <p className=\"text-gray-500\">Cargando datos del histórico...</p>\n      ) : datos.length === 0 ? (\n        <p className=\"text-gray-500\">No hay datos disponibles.</p>\n      ) : (\n        <Line data={data} />\n      )}\n    </div>\n  );\n};\n\nexport default Historico;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}