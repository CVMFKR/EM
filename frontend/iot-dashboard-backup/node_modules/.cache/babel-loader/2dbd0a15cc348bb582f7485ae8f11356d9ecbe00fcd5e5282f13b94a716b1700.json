{"ast":null,"code":"var _jsxFileName = \"/home/camilo/Documents/RaspberryPi/EstacionMeteorologica/frontend/iot-dashboard/src/Historico.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Historico = ({\n  periodo\n}) => {\n  _s();\n  const [datos, setDatos] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let response = await axios.get(`http://localhost:5001/historico/${periodo}`);\n        setDatos(response.data);\n      } catch (error) {\n        console.error('Error al obtener datos históricos:', error);\n      }\n    };\n    fetchData();\n  }, [periodo]);\n  const obtenerLabels = () => {\n    return datos.map(dato => {\n      const fecha = new Date(dato.fecha);\n      return `${fecha.getDate()}/${fecha.getMonth() + 1}`;\n    });\n  };\n  const obtenerTemperaturas = () => {\n    return datos.map(dato => dato.temperatura);\n  };\n  const obtenerHumedades = () => {\n    return datos.map(dato => dato.humedad);\n  };\n  const data = {\n    labels: obtenerLabels(),\n    datasets: [{\n      label: 'Temperatura (°C)',\n      data: obtenerTemperaturas(),\n      borderColor: 'rgba(255, 99, 132, 1)',\n      borderWidth: 1,\n      fill: false\n    }, {\n      label: 'Humedad (%)',\n      data: obtenerHumedades(),\n      borderColor: 'rgba(54, 162, 235, 1)',\n      borderWidth: 1,\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Gr\\xE1ficos Hist\\xF3ricos - \\xDAltimos \", periodo, \" d\\xEDas\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), datos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando datos...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(Historico, \"20jPy2YyX4XSkonh/iLlPszBgA8=\");\n_c = Historico;\nexport default Historico;\nvar _c;\n$RefreshReg$(_c, \"Historico\");","map":{"version":3,"names":["React","useState","useEffect","Line","axios","Chart","jsxDEV","_jsxDEV","Historico","periodo","_s","datos","setDatos","fetchData","response","get","data","error","console","obtenerLabels","map","dato","fecha","Date","getDate","getMonth","obtenerTemperaturas","temperatura","obtenerHumedades","humedad","labels","datasets","label","borderColor","borderWidth","fill","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["/home/camilo/Documents/RaspberryPi/EstacionMeteorologica/frontend/iot-dashboard/src/Historico.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst Historico = ({ periodo }) => {\n    const [datos, setDatos] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let response = await axios.get(`http://localhost:5001/historico/${periodo}`);\n                setDatos(response.data);\n            } catch (error) {\n                console.error('Error al obtener datos históricos:', error);\n            }\n        };\n\n        fetchData();\n    }, [periodo]);\n\n    const obtenerLabels = () => {\n        return datos.map((dato) => {\n            const fecha = new Date(dato.fecha);\n            return `${fecha.getDate()}/${fecha.getMonth() + 1}`;\n        });\n    };\n\n    const obtenerTemperaturas = () => {\n        return datos.map((dato) => dato.temperatura);\n    };\n\n    const obtenerHumedades = () => {\n        return datos.map((dato) => dato.humedad);\n    };\n\n    const data = {\n        labels: obtenerLabels(),\n        datasets: [\n            {\n                label: 'Temperatura (°C)',\n                data: obtenerTemperaturas(),\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 1,\n                fill: false,\n            },\n            {\n                label: 'Humedad (%)',\n                data: obtenerHumedades(),\n                borderColor: 'rgba(54, 162, 235, 1)',\n                borderWidth: 1,\n                fill: false,\n            },\n        ],\n    };\n\n    return (\n        <div>\n            <h2>Gráficos Históricos - Últimos {periodo} días</h2>\n            {datos.length === 0 ? (\n                <p>Cargando datos...</p>\n            ) : (\n                <Line data={data} />\n            )}\n        </div>\n    );\n};\n\nexport default Historico;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}